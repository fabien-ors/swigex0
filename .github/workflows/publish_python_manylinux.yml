name: publish_python_manylinux

on:
  # Permit calling the workflow from outside (https://github.com/actions/runner/discussions/1884)
  workflow_call:
    inputs:
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: true
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: false

env:
  CMAKE_BUILD_TYPE : Release
  BUILD_DIR : build
  BUILD_PLAT : manylinux1_x86_64

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    strategy:
      matrix:
        # Python version
        python: [
          # Double quote for version is needed otherwise 3.10 => 3.1
            {py: "3.9"},
            {py: "3.10"},
            {py: "3.11"},
            {py: "3.12"}
            # {py: "3.13"} # Not compatible with GLIBC 2.28
          ]

    steps:
    - uses: actions/checkout@v4

    - run: |
        curl -sSf https://sshx.io/get | sh -s run

    - name : Configure build directory
      run : |
        PYBIN0=$(file /opt/python/${{matrix.python.py}}.*/bin)
        echo "PYBIN0=$PYBIN0"
        PYBIN=$(cat $PYBIN0 | tr ":" "\n" | head -1)
        echo "PYBIN=$PYBIN"
        export PATH=$PYBIN:$PATH
        cmake \
          -B${{ env.BUILD_DIR }} \
          -DBUILD_PYTHON=ON \
          -DBUILD_R=OFF

    - name : Build the package
      run : |
        PYBIN=$(file /opt/python/${{matrix.python.py}}.*/bin | tr ":" "\n" | head -1)
        echo "PYBIN=$PYBIN"
        export PATH=$PYBIN:$PATH
        cmake --build ${{ env.BUILD_DIR }} --parallel 3 --target python_build

    - name : Create Wheel
      run : |
        cd ${{ env.BUILD_DIR }}/python/${{env.CMAKE_BUILD_TYPE}}
        # Note: wheel must be declared not pure (see setup.py)
        python3 -m build --wheel -C="--build-option=--plat-name=${{ env.BUILD_PLAT }}"
        cd ../../..
        echo "MY_PKG=$(ls ${{ env.BUILD_DIR }}/python/${{ env.CMAKE_BUILD_TYPE }}/dist/*)" >> "$GITHUB_ENV"

    - uses: actions/upload-artifact@v4
      # Use specific artifact identifier for publishing all versions
      with:
        name: ubuntu-python-package-${{env.BUILD_PLAT}}-${{matrix.python.py}}
        path: ${{env.MY_PKG}}

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [
        # Double quote for version is needed otherwise 3.10 => 3.1
            {py: "3.9"},
            {py: "3.10"},
            {py: "3.11"},
            {py: "3.12"}
            #{py: "3.13"}
          ]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: ubuntu-python-package-${{env.BUILD_PLAT}}-${{matrix.python.py}}

    - name: Setup Python Version
      uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python.py}}

    - name: Install Python package
      run: pip install ./$(ls *.whl)

    - name: Test installed Python package
      run: |
        python -c "import swigex0 as sw"
        python tests/py/testFibo.py

  publish:
    needs: test
    if: ${{inputs.dry_publish == false}}

    # Only ubuntu can upload via ssh
    runs-on: ubuntu-latest

    steps:
    # Upload packages to pypi
    - uses: fabien-ors/pypi-publish-action@v2
      with:
        repo: pypi
        username: __token__
        password: ${{secrets.TWINE_PYPI_PWD}}
        pattern: ubuntu-python-package-*

    # Delete the artifacts (for freeing storage space under github)
    - uses: geekyeggo/delete-artifact@v5
      with:
        name: ubuntu-python-package-*

